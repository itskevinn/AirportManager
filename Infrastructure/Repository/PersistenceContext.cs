using Domain.Constants.Enum;
using Domain.Entities;
using Domain.Entities.Base;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace Infrastructure.Repository;

public class PersistenceContext : DbContext
{
	private readonly IConfiguration _config;

	public PersistenceContext(DbContextOptions<PersistenceContext> options, IConfiguration config) : base(options)
	{
		_config = config;
	}

	public async Task CommitAsync()
	{
		await SaveChangesAsync().ConfigureAwait(false);
	}

	protected override void OnModelCreating(ModelBuilder modelBuilder)
	{
		modelBuilder.HasDefaultSchema(_config.GetValue<string>("SchemaName"));
		EntitiesConfig(modelBuilder);
		SetDefaultValues(modelBuilder);
		base.OnModelCreating(modelBuilder);
	}

	private static void EntitiesConfig(ModelBuilder modelBuilder)
	{
		FlightEntityConfig(modelBuilder);
		AirlineEntityConfig(modelBuilder);
		CityEntityConfig(modelBuilder);
		UserEntityConfig(modelBuilder);
		RoleEntityConfig(modelBuilder);
		UserRoleInterceptorConfig(modelBuilder);
		MenuItemRoleInterceptorConfig(modelBuilder);
	}

	private static void GenerateSeeds(ModelBuilder modelBuilder)
	{
		#region RoleSeed

		modelBuilder.Entity<Role>().HasData(
			new
			{
				Id = Guid.Parse("BF1DE1AA-FC78-4B92-6942-08DA36131198"), RoleName = "Admin", Status = true,
				CreatedBy = "AutoGenerated",
				CreatedOn = new DateTime(), UpdatedBy = "AutoGenerated", LastModifiedOn = new DateTime()
			},
			new
			{
				Id = Guid.Parse("4A77CEE4-5CFA-4C90-B41A-08DA36159111"), RoleName = "User", Status = true,
				CreatedBy = "AutoGenerated",
				CreatedOn = new DateTime(), UpdatedBy = "AutoGenerated", LastModifiedOn = new DateTime()
			}
		);

		#endregion

		#region UserSeed

		modelBuilder.Entity<User>().HasData(
			new
			{
				Id = Guid.Parse("4A77CEE4-5CFA-4C90-B41A-08DA36159120"), Name = "Kevin Pontón", Status = true,
				Username = "Admin", Password = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
				CreatedBy = "AutoGenerated",
				CreatedOn = new DateTime(), UpdatedBy = "AutoGenerated", LastModifiedOn = new DateTime()
			},
			new
			{
				Id = Guid.Parse("C82A18C6-E473-4976-5F2E-08DA35E4EB6F"), Name = "Usuario", Status = true,
				Username = "User", Password = "03ac674216f3e15c761ee1a5e255f067953623c8b388b4459e13f978d7c846f4",
				CreatedBy = "AutoGenerated",
				CreatedOn = new DateTime(), UpdatedBy = "AutoGenerated", LastModifiedOn = new DateTime()
			}
		);

		#endregion

		#region MenuItemSeed

		modelBuilder.Entity<MenuItem>().HasData(
			new
			{
				Id = Guid.Parse("012fff70-84e2-4962-84a3-3b7833bb71fb"), Icon = "fa-solid fa-house",
				Label = "Inicio",
				Order = 0,
				RouterLink = "home",
				CreatedBy = "AutoGenerated",
				Status = true,
				CreatedOn = new DateTime(), UpdatedBy = "AutoGenerated", LastModifiedOn = new DateTime()
			},
			new
			{
				Id = Guid.Parse("504731d4-0a34-41d5-9b0b-0611b3f76096"), Icon = "fa-solid fa-plane-departure",
				Label = "Vuelos",
				Order = 1,
				RouterLink = "flights",
				CreatedBy = "AutoGenerated",
				Status = true,
				CreatedOn = new DateTime(), UpdatedBy = "AutoGenerated", LastModifiedOn = new DateTime()
			},
			new
			{
				Id = Guid.Parse("0b63d953-fce2-4538-ba1d-0537680130ae"), Icon = "fa-solid fa-city",
				Label = "Ciudades",
				Order = 3,
				RouterLink = "cities",
				CreatedBy = "AutoGenerated",
				Status = true,
				CreatedOn = new DateTime(), UpdatedBy = "AutoGenerated", LastModifiedOn = new DateTime()
			},
			new
			{
				Id = Guid.Parse("a10dafa8-c540-4509-a08f-d8fe5ded1995"), Icon = "fa-solid fa-plane",
				Label = "Aereolíneas",
				Order = 2,
				RouterLink = "airlines",
				CreatedBy = "AutoGenerated",
				Status = true,
				CreatedOn = new DateTime(), UpdatedBy = "AutoGenerated", LastModifiedOn = new DateTime()
			}
		);

		#endregion

		#region UserRoleSeed

		modelBuilder.Entity<UserRole>().HasData(
			new
			{
				Id = Guid.Parse("BF1DE1AA-FC78-4B92-6942-09DA36131298"),
				UserId = Guid.Parse("4A77CEE4-5CFA-4C90-B41A-08DA36159120"),
				Status = true,
				RoleId = Guid.Parse("BF1DE1AA-FC78-4B92-6942-08DA36131198"),
				CreatedBy = "AutoGenerated",
				CreatedOn = new DateTime(),
				UpdatedBy = "AutoGenerated", LastModifiedOn = new DateTime()
			},
			new
			{
				Id = Guid.Parse("BF1DE1AA-FC78-4B92-6942-09DA3E131298"),
				UserId = Guid.Parse("C82A18C6-E473-4976-5F2E-08DA35E4EB6F"),
				Status = true,
				RoleId = Guid.Parse("4A77CEE4-5CFA-4C90-B41A-08DA36159111"),
				CreatedBy = "AutoGenerated",
				CreatedOn = new DateTime(),
				UpdatedBy = "AutoGenerated",
				LastModifiedOn = new DateTime()
			}
		);

		#endregion

		#region MenuItemRoleSeed

		modelBuilder.Entity<MenuItemRole>().HasData(
			new
			{
				Id = Guid.Parse("C82A18C6-E473-4976-5F2E-08DA35E4EB1A"),
				MenuItemId = Guid.Parse("a10dafa8-c540-4509-a08f-d8fe5ded1995"),
				Status = true,
				RoleId = Guid.Parse("BF1DE1AA-FC78-4B92-6942-08DA36131198"),
				CreatedBy = "AutoGenerated",
				CreatedOn = new DateTime(),
				UpdatedBy = "AutoGenerated",
				LastModifiedOn = new DateTime()
			}, new
			{
				Id = Guid.Parse("C82A18C6-E473-4976-5F2E-08DA35E4EBEF"),
				MenuItemId = Guid.Parse("0b63d953-fce2-4538-ba1d-0537680130ae"),
				RoleId = Guid.Parse("BF1DE1AA-FC78-4B92-6942-08DA36131198"),
				Status = true,
				CreatedBy = "AutoGenerated",
				CreatedOn = new DateTime(),
				UpdatedBy = "AutoGenerated",
				LastModifiedOn = new DateTime()
			},
			new
			{
				Id = Guid.Parse("C82A18C6-E473-4976-5F2E-08DA35E4EBFE"),
				MenuItemId = Guid.Parse("504731d4-0a34-41d5-9b0b-0611b3f76096"),
				RoleId = Guid.Parse("BF1DE1AA-FC78-4B92-6942-08DA36131198"),
				Status = true,
				CreatedBy = "AutoGenerated",
				CreatedOn = new DateTime(),
				UpdatedBy = "AutoGenerated",
				LastModifiedOn = new DateTime()
			}, new
			{
				Id = Guid.Parse("C82A18C6-E473-4976-5F2E-08DA35E4EB8E"),
				MenuItemId = Guid.Parse("012fff70-84e2-4962-84a3-3b7833bb71fb"),
				RoleId = Guid.Parse("BF1DE1AA-FC78-4B92-6942-08DA36131198"),
				Status = true,
				CreatedBy = "AutoGenerated",
				CreatedOn = new DateTime(),
				UpdatedBy = "AutoGenerated",
				LastModifiedOn = new DateTime()
			},
			new
			{
				Id = Guid.Parse("C82A18C6-E473-4976-5F2E-08DA35E4EB8B"),
				MenuItemId = Guid.Parse("012fff70-84e2-4962-84a3-3b7833bb71fb"),
				Status = true,
				RoleId = Guid.Parse("4A77CEE4-5CFA-4C90-B41A-08DA36159111"),
				CreatedBy = "AutoGenerated",
				CreatedOn = new DateTime(),
				UpdatedBy = "AutoGenerated",
				LastModifiedOn = new DateTime()
			},
			new
			{
				Id = Guid.Parse("C82A18C6-E473-4976-5F2E-08DA35E4EB8A"),
				MenuItemId = Guid.Parse("504731d4-0a34-41d5-9b0b-0611b3f76096"),
				Status = true,
				RoleId = Guid.Parse("4A77CEE4-5CFA-4C90-B41A-08DA36159111"),
				CreatedBy = "AutoGenerated",
				CreatedOn = new DateTime(),
				UpdatedBy = "AutoGenerated",
				LastModifiedOn = new DateTime()
			}
		);

		#endregion
	}

	private static void MenuItemRoleInterceptorConfig(ModelBuilder modelBuilder)
	{
		modelBuilder.Entity<MenuItemRole>(mi =>
		{
			mi.HasKey(mr => new { mr.RoleId, mr.MenuItemId });
			mi.HasOne(mr => mr.Role)
				.WithMany(r => r.RoleMenuItems)
				.HasForeignKey(mr => mr.RoleId);
			mi.HasOne(mr => mr.MenuItem)
				.WithMany(r => r.MenuItemRoles)
				.HasForeignKey(mr => mr.MenuItemId);
			mi.Property("CreatedBy").IsRequired(false);
		});
	}

	private static void RoleEntityConfig(ModelBuilder modelBuilder)
	{
		modelBuilder.Entity<Role>(entity => { entity.HasKey(r => r.Id); });
	}

	private static void UserEntityConfig(ModelBuilder modelBuilder)
	{
		modelBuilder.Entity<User>(entity => { entity.HasKey(u => u.Id); });
	}

	private static void UserRoleInterceptorConfig(ModelBuilder modelBuilder)
	{
		modelBuilder.Entity<UserRole>().HasKey(ur => new { ur.RoleId, ur.UserId });
		modelBuilder.Entity<UserRole>().HasOne(ur => ur.Role)
			.WithMany(r => r.UserRoles)
			.HasForeignKey(ur => ur.RoleId);
		modelBuilder.Entity<UserRole>(ur => ur.Property(r => r.CreatedBy).IsRequired(false));
		modelBuilder.Entity<UserRole>().HasOne(ur => ur.User)
			.WithMany(u => u.UserRoles)
			.HasForeignKey(ur => ur.UserId);
	}

	private static void CityEntityConfig(ModelBuilder modelBuilder)
	{
		modelBuilder.Entity<City>(entity => { entity.HasKey(c => c.Id); });
	}

	private static void AirlineEntityConfig(ModelBuilder modelBuilder)
	{
		modelBuilder.Entity<Airline>(entity =>
		{
			entity.HasKey(a => a.Id);
			entity.Property(a => a.Name).IsRequired();
		});
	}

	private static void SetDefaultValues(ModelBuilder modelBuilder)
	{
		GenerateSeeds(modelBuilder);
		foreach (var entityType in modelBuilder.Model.GetEntityTypes())
		{
			var t = entityType.ClrType;
			if (!typeof(DomainEntity).IsAssignableFrom(t)) continue;
			modelBuilder.Entity(entityType.Name).Property<DateTime>("CreatedOn").HasDefaultValueSql("GETDATE()");
			modelBuilder.Entity(entityType.Name).Property<DateTime>("LastModifiedOn")
				.HasDefaultValueSql("GETDATE()");
			modelBuilder.Entity(entityType.Name).Property<string>("UpdatedBy").IsRequired(false);
		}
	}

	private static void FlightEntityConfig(ModelBuilder modelBuilder)
	{
		modelBuilder.Entity<Flight>(
			entity =>
			{
				entity.HasKey(f => f.Id);
				entity.Property(f => f.FlightStatus)
					.HasConversion(
						v => v.ToString(),
						v => (FlightStatus)Enum.Parse(typeof(FlightStatus), v))
					.IsRequired();
				entity.Property(f => f.CheckInTime).IsRequired();
				entity.Property(f => f.CheckOutTime).IsRequired();
				entity.Property(f => f.CheckOutDate).IsRequired();
				entity.HasOne(f => f.Airline).WithMany().HasForeignKey(f => f.AirlineId);
				entity.HasOne(f => f.DepartureCity).WithMany().HasForeignKey(f => f.DepartureCityId)
					.OnDelete(DeleteBehavior.NoAction);
				entity.HasOne(f => f.DestinyCity).WithMany().HasForeignKey(f => f.DestinyCityId)
					.OnDelete(DeleteBehavior.NoAction);
			});
	}
}